package routes

import (
	"github.com/Fernlizer/Breed-inquiry-Golang-Fiber-Backend/api/middleware"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/healthcheck"
	"gorm.io/gorm"
)

// SetupRoutes ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Routes
func SetupRoutes(app *fiber.App, db *gorm.DB) {
	// ‡πÉ‡∏ä‡πâ AssignRequestID ‡∏Å‡πà‡∏≠‡∏ô Log
	app.Use(middleware.AssignRequestID)
	app.Use(middleware.RequestLogger())

	// ‡πÉ‡∏ä‡πâ Middleware Health Check ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô Kubernetes
	app.Get("/health", healthcheck.New())

	app.Use(healthcheck.New(healthcheck.Config{
		// üîπ Liveness Probe ‚Üí ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Server ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
		LivenessProbe: func(c *fiber.Ctx) bool {
			return true // ‡∏ñ‡πâ‡∏≤ Server ‡∏¢‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ return true
		},
		LivenessEndpoint: "/live", // ‡πÄ‡∏ä‡πá‡∏Ñ Liveness ‡∏ó‡∏µ‡πà `/live`

		// üîπ Readiness Probe ‚Üí ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Database ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
		ReadinessProbe: func(c *fiber.Ctx) bool {
			sqlDB, err := db.DB()
			if err != nil {
				return false
			}
			if err := sqlDB.Ping(); err != nil {
				return false // ‡∏ñ‡πâ‡∏≤ Database ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ return false
			}
			return true // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ return true
		},
		ReadinessEndpoint: "/ready", // ‡πÄ‡∏ä‡πá‡∏Ñ Readiness ‡∏ó‡∏µ‡πà `/ready`
	}))

	// Apply Global Middleware
	api := app.Group("/api")
	api.Use(middleware.Recover())
	api.Use(middleware.CORS())
	api.Use(middleware.RateLimit())
	api.Use(middleware.GZIPCompression())

	// API Endpoints (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
	// api.Post("/breed-inquiry", handler.BreedInquiry)
}
